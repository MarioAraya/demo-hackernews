{"hits":[{"created_at":"2018-07-19T21:45:05.000Z","title":null,"url":null,"author":"nodesocket","points":null,"story_text":null,"comment_text":"I believe the load balancer outage only affected global load balancers not regional load balancers. Is that still accurate?","num_comments":null,"story_id":17569069,"story_title":"Google Cloud Downtime Postmortem","story_url":"https://status.cloud.google.com/incident/cloud-networking/18012?m=1","parent_id":17569069,"created_at_i":1532036705,"_tags":["comment","author_nodesocket","story_17569069"],"objectID":"17570580","_highlightResult":{"author":{"value":"\u003cem\u003enodes\u003c/em\u003eocket","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"comment_text":{"value":"I believe the load balancer outage only affected global load balancers not regional load balancers. Is that still accurate?","matchLevel":"none","matchedWords":[]},"story_title":{"value":"Google Cloud Downtime Postmortem","matchLevel":"none","matchedWords":[]},"story_url":{"value":"https://status.cloud.google.com/incident/cloud-networking/18012?m=1","matchLevel":"none","matchedWords":[]}}},{"created_at":"2018-07-19T21:35:09.000Z","title":null,"url":null,"author":"danso","points":null,"story_text":null,"comment_text":"\u0026gt; \u003ci\u003eIt goes to show: something doesn\u0026#x27;t need to be actually-better. It doesn\u0026#x27;t need to be actually-simpler. It doesn\u0026#x27;t need to make your job easier or better. It needs to make people think it does that.\u003c/i\u003e\u003cp\u003eI don\u0026#x27;t agree with that takeaway. You ask us to consider all the diversity of opinions here, but then you evaluate them out of context, what one person says about Python is not necessarily in reference to the metrics that another has laid out, hence, they don\u0026#x27;t \u0026quot;directly contradict each other\u0026quot;.\u003cp\u003eTo claim that \u0026quot;oh you all just \u003ci\u003ethink\u003c/i\u003e Python is less verbose than Java, but it\u0026#x27;s all hype and no fact\u0026quot; is utter absurdity. You seem to have had bad experience that make you think Pythonistas are the tech world\u0026#x27;s Jehovah Witnesses, when plenty of other programmers will make the same case against Javascript (especially in the Node.js context).\u003cp\u003eWhy do you think Python, or any programming language, has to be \u0026quot;revolutionary\u0026quot; -- or engage in cultmindthink -- for it to become popular?\u003cp\u003eedit: added \u0026quot;or engage in cultmindthink\u0026quot;","num_comments":null,"story_id":17569756,"story_title":"Python has brought computer programming to a vast new audience","story_url":"https://www.economist.com/science-and-technology/2018/07/21/python-has-brought-computer-programming-to-a-vast-new-audience","parent_id":17570406,"created_at_i":1532036109,"_tags":["comment","author_danso","story_17569756"],"objectID":"17570498","_highlightResult":{"author":{"value":"danso","matchLevel":"none","matchedWords":[]},"comment_text":{"value":"\u0026gt; \u003ci\u003eIt goes to show: something doesn't need to be actually-better. It doesn't need to be actually-simpler. It doesn't need to make your job easier or better. It needs to make people think it does that.\u003c/i\u003e\u003cp\u003eI don't agree with that takeaway. You ask us to consider all the diversity of opinions here, but then you evaluate them out of context, what one person says about Python is not necessarily in reference to the metrics that another has laid out, hence, they don't \u0026quot;directly contradict each other\u0026quot;.\u003cp\u003eTo claim that \u0026quot;oh you all just \u003ci\u003ethink\u003c/i\u003e Python is less verbose than Java, but it's all hype and no fact\u0026quot; is utter absurdity. You seem to have had bad experience that make you think Pythonistas are the tech world's Jehovah Witnesses, when plenty of other programmers will make the same case against Javascript (especially in the \u003cem\u003eNode.js\u003c/em\u003e context).\u003cp\u003eWhy do you think Python, or any programming language, has to be \u0026quot;revolutionary\u0026quot; -- or engage in cultmindthink -- for it to become popular?\u003cp\u003eedit: added \u0026quot;or engage in cultmindthink\u0026quot;","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"story_title":{"value":"Python has brought computer programming to a vast new audience","matchLevel":"none","matchedWords":[]},"story_url":{"value":"https://www.economist.com/science-and-technology/2018/07/21/python-has-brought-computer-programming-to-a-vast-new-audience","matchLevel":"none","matchedWords":[]}}},{"created_at":"2018-07-19T16:38:52.000Z","title":null,"url":null,"author":"tannhaeuser","points":null,"story_text":null,"comment_text":"\u0026gt; \u003ci\u003ethere\u0026#x27;s a reason it\u0026#x27;s been almost completely abandoned in favour of JSON\u0026#x2F;REST\u003c/i\u003e\u003cp\u003eThat\u0026#x27;s kindof ironic to say in a thread about the endless debate about doing REST the proper way isn\u0026#x27;t it? SOA(P) is really about defining a service in terms of its external interactions in language-neutral descriptions for big applications with long-term maintainability. It\u0026#x27;s not about developer convenience.\u003cp\u003e\u003ci\u003eAll\u003c/i\u003e REST applications I\u0026#x27;ve encountered try to shoehorn state changes into HTTP PUT requests and would have greatly benefitted by expressing these as explicit state transitions in a WSDL-like RPC model. \u003ci\u003eNone\u003c/i\u003e has made the slightest attempt to represent state via HATEOS and advertise interactions via hyperlinks, which is the entire point of REST and loose coupling. In typical server-side languages other than JS\u0026#x2F;node.js, JSON isn\u0026#x27;t a native object serialization format and must be produced\u0026#x2F;consumed exactly like XML (eg. by using binding annotations or similar). So I\u0026#x27;m not sure what has been gained, other than a mess of JSON-over-http services without transaction boundaries  for the next generation to clean up.","num_comments":null,"story_id":17563851,"story_title":"REST was never about CRUD","story_url":"https://tyk.io/blog/rest-never-crud/","parent_id":17567210,"created_at_i":1532018332,"_tags":["comment","author_tannhaeuser","story_17563851"],"objectID":"17568000","_highlightResult":{"author":{"value":"tannhaeuser","matchLevel":"none","matchedWords":[]},"comment_text":{"value":"\u0026gt; \u003ci\u003ethere's a reason it's been almost completely abandoned in favour of JSON/REST\u003c/i\u003e\u003cp\u003eThat's kindof ironic to say in a thread about the endless debate about doing REST the proper way isn't it? SOA(P) is really about defining a service in terms of its external interactions in language-neutral descriptions for big applications with long-term maintainability. It's not about developer convenience.\u003cp\u003e\u003ci\u003eAll\u003c/i\u003e REST applications I've encountered try to shoehorn state changes into HTTP PUT requests and would have greatly benefitted by expressing these as explicit state transitions in a WSDL-like RPC model. \u003ci\u003eNone\u003c/i\u003e has made the slightest attempt to represent state via HATEOS and advertise interactions via hyperlinks, which is the entire point of REST and loose coupling. In typical server-side languages other than JS/\u003cem\u003enode.js\u003c/em\u003e, JSON isn't a native object serialization format and must be produced/consumed exactly like XML (eg. by using binding annotations or similar). So I'm not sure what has been gained, other than a mess of JSON-over-http services without transaction boundaries  for the next generation to clean up.","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"story_title":{"value":"REST was never about CRUD","matchLevel":"none","matchedWords":[]},"story_url":{"value":"https://tyk.io/blog/rest-never-crud/","matchLevel":"none","matchedWords":[]}}},{"created_at":"2018-07-19T16:27:27.000Z","title":null,"url":null,"author":"y4mi","points":null,"story_text":null,"comment_text":"the master certificate is self signed yes.\u003cp\u003ethis self signed certificate now has to sign the client certificate(s). Otherwise, the clients aren\u0026#x27;t allowed to address the master.\u003cp\u003eAt least thats how i\u0026#x27;ve come across it. Its actually pretty common in the infrastructure world. Your OPS team can probably tell you which services utilize it in your software stack, though you as a developer probably never had to worry about it.\u003cp\u003eThough a lot of services only use a singular client certificate across all nodes and just revoke the hole chain for rotations","num_comments":null,"story_id":17563851,"story_title":"REST was never about CRUD","story_url":"https://tyk.io/blog/rest-never-crud/","parent_id":17567059,"created_at_i":1532017647,"_tags":["comment","author_y4mi","story_17563851"],"objectID":"17567852","_highlightResult":{"author":{"value":"y4mi","matchLevel":"none","matchedWords":[]},"comment_text":{"value":"the master certificate is self signed yes.\u003cp\u003ethis self signed certificate now has to sign the client certificate(s). Otherwise, the clients aren't allowed to address the master.\u003cp\u003eAt least thats how i've come across it. Its actually pretty common in the infrastructure world. Your OPS team can probably tell you which services utilize it in your software stack, though you as a developer probably never had to worry about it.\u003cp\u003eThough a lot of services only use a singular client certificate across all \u003cem\u003enodes\u003c/em\u003e and just revoke the hole chain for rotations","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"story_title":{"value":"REST was never about CRUD","matchLevel":"none","matchedWords":[]},"story_url":{"value":"https://tyk.io/blog/rest-never-crud/","matchLevel":"none","matchedWords":[]}}},{"created_at":"2018-07-19T16:22:06.000Z","title":null,"url":null,"author":"Scea91","points":null,"story_text":null,"comment_text":"\u003ca href=\"https:\u0026#x2F;\u0026#x2F;distill.pub\u0026#x2F;2018\u0026#x2F;building-blocks\u0026#x2F;\" rel=\"nofollow\"\u003ehttps:\u0026#x2F;\u0026#x2F;distill.pub\u0026#x2F;2018\u0026#x2F;building-blocks\u0026#x2F;\u003c/a\u003e This seems pretty good to me. And the nets are not exactly as small as I meant.\u003cp\u003eI work with random forests and build forest which have more than 80000 nodes per tree. Other than some basic computation of feature importance, it is a black box on the same scale as modern neural nets, maybe even worse.","num_comments":null,"story_id":17556945,"story_title":"The Mythos of Model Interpretability in Machine Learning","story_url":"https://queue.acm.org/detail.cfm?id=3241340","parent_id":17566403,"created_at_i":1532017326,"_tags":["comment","author_Scea91","story_17556945"],"objectID":"17567789","_highlightResult":{"author":{"value":"Scea91","matchLevel":"none","matchedWords":[]},"comment_text":{"value":"\u003ca href=\"https://distill.pub/2018/building-blocks/\" rel=\"nofollow\"\u003ehttps://distill.pub/2018/building-blocks/\u003c/a\u003e This seems pretty good to me. And the nets are not exactly as small as I meant.\u003cp\u003eI work with random forests and build forest which have more than 80000 \u003cem\u003enodes\u003c/em\u003e per tree. Other than some basic computation of feature importance, it is a black box on the same scale as modern neural nets, maybe even worse.","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"story_title":{"value":"The Mythos of Model Interpretability in Machine Learning","matchLevel":"none","matchedWords":[]},"story_url":{"value":"https://queue.acm.org/detail.cfm?id=3241340","matchLevel":"none","matchedWords":[]}}},{"created_at":"2018-07-19T15:37:53.000Z","title":null,"url":null,"author":"013a","points":null,"story_text":null,"comment_text":"It makes many things easier and many things harder. The lack of really good backend libraries\u0026#x2F;frameworks outside of NodeJS is the most concerning thing.\u003cp\u003eAlso; debugging and monitoring GraphQL APIs \u003ci\u003esucks\u003c/i\u003e. Considerations:\u003cp\u003e- Any subfield of a query can throw an error, but the rest of the fields can succeed, because GraphQL frameworks are allowed to run each field resolver asynchronously.\u003cp\u003e- Because of this, any GraphQL query is capable of returning multiple errors.\u003cp\u003e- Rate limiting is exceedingly difficult due to nested resolvers. I\u0026#x27;ve seen solutions which involve annotating your schemas with \u0026quot;cost\u0026quot; numbers, and only allowing each query to run up to a maximum \u0026quot;cost\u0026quot; before failing by dynamically adding the costs of each field they request. Traditional rate limiting doesn\u0026#x27;t work.\u003cp\u003e- Traditional APM platforms also don\u0026#x27;t work. Prepare to adopt Apollo Engine and pay them $600\u0026#x2F;month on top of the money you\u0026#x27;re already paying New Relic or Datadog.","num_comments":null,"story_id":17565508,"story_title":"Ask HN: Were you happy moving your API from REST to GraphQL?","story_url":null,"parent_id":17565508,"created_at_i":1532014673,"_tags":["comment","author_013a","story_17565508"],"objectID":"17567299","_highlightResult":{"author":{"value":"013a","matchLevel":"none","matchedWords":[]},"comment_text":{"value":"It makes many things easier and many things harder. The lack of really good backend libraries/frameworks outside of \u003cem\u003eNodeJS\u003c/em\u003e is the most concerning thing.\u003cp\u003eAlso; debugging and monitoring GraphQL APIs \u003ci\u003esucks\u003c/i\u003e. Considerations:\u003cp\u003e- Any subfield of a query can throw an error, but the rest of the fields can succeed, because GraphQL frameworks are allowed to run each field resolver asynchronously.\u003cp\u003e- Because of this, any GraphQL query is capable of returning multiple errors.\u003cp\u003e- Rate limiting is exceedingly difficult due to nested resolvers. I've seen solutions which involve annotating your schemas with \u0026quot;cost\u0026quot; numbers, and only allowing each query to run up to a maximum \u0026quot;cost\u0026quot; before failing by dynamically adding the costs of each field they request. Traditional rate limiting doesn't work.\u003cp\u003e- Traditional APM platforms also don't work. Prepare to adopt Apollo Engine and pay them $600/month on top of the money you're already paying New Relic or Datadog.","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"story_title":{"value":"Ask HN: Were you happy moving your API from REST to GraphQL?","matchLevel":"none","matchedWords":[]}}},{"created_at":"2018-07-19T15:17:57.000Z","title":null,"url":null,"author":"SingAlong","points":null,"story_text":null,"comment_text":"GraphQL is great for the frontend, but moving to GraphQL involves both people and tech issues. Common mistakes made when using new technologies are made all over again.\u003cp\u003e* Watch out for bad implementation of the GraphQL API (this will definitely result in bad performance).\u003cp\u003e* Design the GraphQL schema that you want the user to see\u0026#x2F;perceive. Not every object or field in your database needs to be exposed via the API the way it is.\u003cp\u003eMy workplace is currently moving a huge monolith into a bunch of manageable components. Each of these components has its own GraphQL endpoint. Using schema-stitching, these are being stitched together into one endpoint for API users.\u003cp\u003eAs a result of our codebase, we\u0026#x27;ve tried GraphQL in:\u003cp\u003e* Ruby (graphql-ruby) - WATCHOUT Relay arguments for connection fields are not exposed to the library user. So basically you have to implement your own Relay-compliant stuff if you need access to the pagination arguments from Relay. Also, documentation is broken.\u003cp\u003e* Python (graphene) - We\u0026#x27;ve had no issues so far. We worked around it.\u003cp\u003e* Node.js (Apollo GraphQL) - OH MY BUTTERFLIES. So far, this is the ONLY library I have come across that is polished and has plenty of documentation.\u003cp\u003e* Elixir (Absinthe) - My coworker worked on this part. He did not complain. So I\u0026#x27;m assuming he had no issues.\u003cp\u003eThe \u0026quot;Learn * in a day\u0026quot; joke applies to GraphQL. As simple as GraphQL looks for the client-side, it is beast of a job to build a GraphQL backend that is optimized for production.\u003cp\u003eServers-side implementation of GraphQL is not very well documented apart from hello-worldly examples. Most of the knowledge found online is about client-side usage.\u003cp\u003eDue to poor documentation\u0026#x2F;examples provided, ramping up people with GraphQL is hard. Most first iterations I\u0026#x27;ve had to review were slower than our REST APIs because of unoptimized code. Sitting down for a few minutes solves that problem.\u003cp\u003eTo ramp up people at work place, I ended up having to do this:\u003cp\u003e* Ask people to use the GitHub v4 API to checkout GraphQL.\u003cp\u003e* Make them build a GraphQL server for a blog app.\u003cp\u003e* Dive straight into whatever feature\u0026#x2F;API they would build.\u003cp\u003e* Review their work a few dozen times and show them optimization tricks.\u003cp\u003eMy most valuable lesson: When in doubt, dig into the source of these libraries.","num_comments":null,"story_id":17565508,"story_title":"Ask HN: Were you happy moving your API from REST to GraphQL?","story_url":null,"parent_id":17565508,"created_at_i":1532013477,"_tags":["comment","author_SingAlong","story_17565508"],"objectID":"17567103","_highlightResult":{"author":{"value":"SingAlong","matchLevel":"none","matchedWords":[]},"comment_text":{"value":"GraphQL is great for the frontend, but moving to GraphQL involves both people and tech issues. Common mistakes made when using new technologies are made all over again.\u003cp\u003e* Watch out for bad implementation of the GraphQL API (this will definitely result in bad performance).\u003cp\u003e* Design the GraphQL schema that you want the user to see/perceive. Not every object or field in your database needs to be exposed via the API the way it is.\u003cp\u003eMy workplace is currently moving a huge monolith into a bunch of manageable components. Each of these components has its own GraphQL endpoint. Using schema-stitching, these are being stitched together into one endpoint for API users.\u003cp\u003eAs a result of our codebase, we've tried GraphQL in:\u003cp\u003e* Ruby (graphql-ruby) - WATCHOUT Relay arguments for connection fields are not exposed to the library user. So basically you have to implement your own Relay-compliant stuff if you need access to the pagination arguments from Relay. Also, documentation is broken.\u003cp\u003e* Python (graphene) - We've had no issues so far. We worked around it.\u003cp\u003e* \u003cem\u003eNode.js\u003c/em\u003e (Apollo GraphQL) - OH MY BUTTERFLIES. So far, this is the ONLY library I have come across that is polished and has plenty of documentation.\u003cp\u003e* Elixir (Absinthe) - My coworker worked on this part. He did not complain. So I'm assuming he had no issues.\u003cp\u003eThe \u0026quot;Learn * in a day\u0026quot; joke applies to GraphQL. As simple as GraphQL looks for the client-side, it is beast of a job to build a GraphQL backend that is optimized for production.\u003cp\u003eServers-side implementation of GraphQL is not very well documented apart from hello-worldly examples. Most of the knowledge found online is about client-side usage.\u003cp\u003eDue to poor documentation/examples provided, ramping up people with GraphQL is hard. Most first iterations I've had to review were slower than our REST APIs because of unoptimized code. Sitting down for a few minutes solves that problem.\u003cp\u003eTo ramp up people at work place, I ended up having to do this:\u003cp\u003e* Ask people to use the GitHub v4 API to checkout GraphQL.\u003cp\u003e* Make them build a GraphQL server for a blog app.\u003cp\u003e* Dive straight into whatever feature/API they would build.\u003cp\u003e* Review their work a few dozen times and show them optimization tricks.\u003cp\u003eMy most valuable lesson: When in doubt, dig into the source of these libraries.","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"story_title":{"value":"Ask HN: Were you happy moving your API from REST to GraphQL?","matchLevel":"none","matchedWords":[]}}},{"created_at":"2018-07-19T15:12:12.000Z","title":null,"url":null,"author":"t_fatus","points":null,"story_text":null,"comment_text":"Python (Django) support is good (appart from subscription), but not as out of the box as NodeJS indeed","num_comments":null,"story_id":17565508,"story_title":"Ask HN: Were you happy moving your API from REST to GraphQL?","story_url":null,"parent_id":17567024,"created_at_i":1532013132,"_tags":["comment","author_t_fatus","story_17565508"],"objectID":"17567044","_highlightResult":{"author":{"value":"t_fatus","matchLevel":"none","matchedWords":[]},"comment_text":{"value":"Python (Django) support is good (appart from subscription), but not as out of the box as \u003cem\u003eNodeJS\u003c/em\u003e indeed","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"story_title":{"value":"Ask HN: Were you happy moving your API from REST to GraphQL?","matchLevel":"none","matchedWords":[]}}},{"created_at":"2018-07-19T15:10:41.000Z","title":null,"url":null,"author":"roadbeats","points":null,"story_text":null,"comment_text":"Could you all tell about your stack, too ? Do we have to use NodeJS in order to get GraphQL working properly ? I\u0026#x27;m aware of the libraries available for other languages, but NodeJS seems to be the only platform with proper support. I wonder if there is any Go developers building servers with GraphQL.","num_comments":null,"story_id":17565508,"story_title":"Ask HN: Were you happy moving your API from REST to GraphQL?","story_url":null,"parent_id":17565508,"created_at_i":1532013041,"_tags":["comment","author_roadbeats","story_17565508"],"objectID":"17567024","_highlightResult":{"author":{"value":"roadbeats","matchLevel":"none","matchedWords":[]},"comment_text":{"value":"Could you all tell about your stack, too ? Do we have to use \u003cem\u003eNodeJS\u003c/em\u003e in order to get GraphQL working properly ? I'm aware of the libraries available for other languages, but \u003cem\u003eNodeJS\u003c/em\u003e seems to be the only platform with proper support. I wonder if there is any Go developers building servers with GraphQL.","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"story_title":{"value":"Ask HN: Were you happy moving your API from REST to GraphQL?","matchLevel":"none","matchedWords":[]}}},{"created_at":"2018-07-19T15:08:59.000Z","title":null,"url":null,"author":"t_fatus","points":null,"story_text":null,"comment_text":"I\u0026#x27;d like to add that correctly designed resolvers allow you:\n- to control very easily who can fetch what where it\u0026#x27;s fetched (permissions)\n- to fetch nested data when you need it without writing serializers\n- to help your frontend team find what they are looking for without asking the backend team everytime\n- mutations are a huge plus when it comes to standardization of your API too\u003cp\u003eFYI we\u0026#x27;re using it in production over a django backend (which comes with some drawbacks, since subscriptions == pushed updates are not perfectly implemented) with our react\u0026#x2F;apollo apps (web and native) and in my opinion the overhead lies surprisingly more in the frontend side (writing data connectors is longer, but way more explicit, than using rest queries returning json)than on the backend (where you just declare resolvers, a thing you don\u0026#x27;t even need to do in nodejs) and handle permissions.","num_comments":null,"story_id":17565508,"story_title":"Ask HN: Were you happy moving your API from REST to GraphQL?","story_url":null,"parent_id":17565508,"created_at_i":1532012939,"_tags":["comment","author_t_fatus","story_17565508"],"objectID":"17567004","_highlightResult":{"author":{"value":"t_fatus","matchLevel":"none","matchedWords":[]},"comment_text":{"value":"I'd like to add that correctly designed resolvers allow you:\n- to control very easily who can fetch what where it's fetched (permissions)\n- to fetch nested data when you need it without writing serializers\n- to help your frontend team find what they are looking for without asking the backend team everytime\n- mutations are a huge plus when it comes to standardization of your API too\u003cp\u003eFYI we're using it in production over a django backend (which comes with some drawbacks, since subscriptions == pushed updates are not perfectly implemented) with our react/apollo apps (web and native) and in my opinion the overhead lies surprisingly more in the frontend side (writing data connectors is longer, but way more explicit, than using rest queries returning json)than on the backend (where you just declare resolvers, a thing you don't even need to do in \u003cem\u003enodejs\u003c/em\u003e) and handle permissions.","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"story_title":{"value":"Ask HN: Were you happy moving your API from REST to GraphQL?","matchLevel":"none","matchedWords":[]}}},{"created_at":"2018-07-19T13:47:19.000Z","title":null,"url":null,"author":"throwaway2016a","points":null,"story_text":null,"comment_text":"For read and search operations I typically rate limit per machine based on probability that machine gets hit using machine signature. And as a secondary (more leniant metric, just IP).\u003cp\u003eI don\u0026#x27;t centrally track rates unless a signature comes close to 1\u0026#x2F;N the limit where N is the number of nodes. At which point I will talk to the other nodes Peer to Peer.\u003cp\u003eCan still be abused but works pretty well most of the time. It also doesn\u0026#x27;t work if you have a number of nodes that is approximating your rate limit because if you do, you hit 1\u0026#x2F;N on request #1.\u003cp\u003eFor that reason I tend to choose pretty lenient rate limits (call it one request a second with bursts in a 5 minute window)\u003cp\u003eFor write I use OAuth2 with bearer tokens being a JWT token with a short expiry. I only need to maintain a blacklist of invalidated tokens for the length of the expiry. Rate limiting would work the same way as reads.","num_comments":null,"story_id":17565508,"story_title":"If you've moved your API from REST to GraphQL, were you happy with the outcome?","story_url":null,"parent_id":17566047,"created_at_i":1532008039,"_tags":["comment","author_throwaway2016a","story_17565508"],"objectID":"17566182","_highlightResult":{"author":{"value":"throwaway2016a","matchLevel":"none","matchedWords":[]},"comment_text":{"value":"For read and search operations I typically rate limit per machine based on probability that machine gets hit using machine signature. And as a secondary (more leniant metric, just IP).\u003cp\u003eI don't centrally track rates unless a signature comes close to 1/N the limit where N is the number of \u003cem\u003enodes\u003c/em\u003e. At which point I will talk to the other \u003cem\u003enodes\u003c/em\u003e Peer to Peer.\u003cp\u003eCan still be abused but works pretty well most of the time. It also doesn't work if you have a number of \u003cem\u003enodes\u003c/em\u003e that is approximating your rate limit because if you do, you hit 1/N on request #1.\u003cp\u003eFor that reason I tend to choose pretty lenient rate limits (call it one request a second with bursts in a 5 minute window)\u003cp\u003eFor write I use OAuth2 with bearer tokens being a JWT token with a short expiry. I only need to maintain a blacklist of invalidated tokens for the length of the expiry. Rate limiting would work the same way as reads.","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"story_title":{"value":"If you've moved your API from REST to GraphQL, were you happy with the outcome?","matchLevel":"none","matchedWords":[]}}},{"created_at":"2018-07-19T12:31:09.000Z","title":null,"url":null,"author":"Scea91","points":null,"story_text":null,"comment_text":"I think interpretability is much more correlated with model size than model type.\u003cp\u003eSmall neural net is much more interpretable than decision trees with thousands of nodes.","num_comments":null,"story_id":17556945,"story_title":"The Mythos of Model Interpretability in Machine Learning","story_url":"https://queue.acm.org/detail.cfm?id=3241340","parent_id":17556945,"created_at_i":1532003469,"_tags":["comment","author_Scea91","story_17556945"],"objectID":"17565607","_highlightResult":{"author":{"value":"Scea91","matchLevel":"none","matchedWords":[]},"comment_text":{"value":"I think interpretability is much more correlated with model size than model type.\u003cp\u003eSmall neural net is much more interpretable than decision trees with thousands of \u003cem\u003enodes\u003c/em\u003e.","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"story_title":{"value":"The Mythos of Model Interpretability in Machine Learning","matchLevel":"none","matchedWords":[]},"story_url":{"value":"https://queue.acm.org/detail.cfm?id=3241340","matchLevel":"none","matchedWords":[]}}},{"created_at":"2018-07-19T06:47:59.000Z","title":null,"url":null,"author":"muriithi","points":null,"story_text":null,"comment_text":"Yes. I develop on both Ubuntu and Windows.\u003cp\u003eI mostly do Node.js and Android development so I can work exclusively in Linux but some of my customers install my software on Windows. Always good to see whether everything works on Windows.","num_comments":null,"story_id":17564265,"story_title":"Ask HN: Do you use windows for development?","story_url":null,"parent_id":17564265,"created_at_i":1531982879,"_tags":["comment","author_muriithi","story_17564265"],"objectID":"17564351","_highlightResult":{"author":{"value":"muriithi","matchLevel":"none","matchedWords":[]},"comment_text":{"value":"Yes. I develop on both Ubuntu and Windows.\u003cp\u003eI mostly do \u003cem\u003eNode.js\u003c/em\u003e and Android development so I can work exclusively in Linux but some of my customers install my software on Windows. Always good to see whether everything works on Windows.","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"story_title":{"value":"Ask HN: Do you use windows for development?","matchLevel":"none","matchedWords":[]}}},{"created_at":"2018-07-19T06:41:16.000Z","title":"Operationalizing Node.js for Server Side Rendering","url":"https://medium.com/airbnb-engineering/operationalizing-node-js-for-server-side-rendering-c5ba718acfc9","author":"muriithi","points":3,"story_text":null,"comment_text":null,"num_comments":0,"story_id":null,"story_title":null,"story_url":null,"parent_id":null,"created_at_i":1531982476,"_tags":["story","author_muriithi","story_17564329"],"objectID":"17564329","_highlightResult":{"title":{"value":"Operationalizing \u003cem\u003eNode.js\u003c/em\u003e for Server Side Rendering","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"url":{"value":"https://medium.com/airbnb-engineering/operationalizing-node-js-for-server-side-rendering-c5ba718acfc9","matchLevel":"none","matchedWords":[]},"author":{"value":"muriithi","matchLevel":"none","matchedWords":[]}}},{"created_at":"2018-07-19T04:19:53.000Z","title":null,"url":null,"author":"nineteen999","points":null,"story_text":null,"comment_text":"I have entire environments marked up as XML, including application servers and various parameters, database clusters and their replication parameters\u0026#x2F;partners etc.\u003cp\u003eThis feeds into automation for everything from inventory\u0026#x2F;hostvars for ansible, DNS zone file contents, DHCP configuration, placement of VM\u0026#x27;s on VMware hosts etc. Clear yet flexible structure and the ability to have attributes on the nodes itself as well as data within them makes it so much more versatile than YAML or JSON for me.\u003cp\u003eAdd to that XPath queries etc. xmllint\u0026#x2F;xmlstarlet\u0026#x2F;python+lxml are so useful, every time I try to process JSON with tools like jq I feel like I am going crosseyed.","num_comments":null,"story_id":17560996,"story_title":"JSON isn't a good configuration language","story_url":"https://www.lucidchart.com/techblog/2018/07/16/why-json-isnt-a-good-configuration-language/","parent_id":17563832,"created_at_i":1531973993,"_tags":["comment","author_nineteen999","story_17560996"],"objectID":"17563913","_highlightResult":{"author":{"value":"nineteen999","matchLevel":"none","matchedWords":[]},"comment_text":{"value":"I have entire environments marked up as XML, including application servers and various parameters, database clusters and their replication parameters/partners etc.\u003cp\u003eThis feeds into automation for everything from inventory/hostvars for ansible, DNS zone file contents, DHCP configuration, placement of VM's on VMware hosts etc. Clear yet flexible structure and the ability to have attributes on the \u003cem\u003enodes\u003c/em\u003e itself as well as data within them makes it so much more versatile than YAML or JSON for me.\u003cp\u003eAdd to that XPath queries etc. xmllint/xmlstarlet/python+lxml are so useful, every time I try to process JSON with tools like jq I feel like I am going crosseyed.","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"story_title":{"value":"JSON isn't a good configuration language","matchLevel":"none","matchedWords":[]},"story_url":{"value":"https://www.lucidchart.com/techblog/2018/07/16/why-json-isnt-a-good-configuration-language/","matchLevel":"none","matchedWords":[]}}},{"created_at":"2018-07-18T23:18:52.000Z","title":null,"url":null,"author":"remoroid","points":null,"story_text":null,"comment_text":"Yep, if you can even compare Electron to Qt. Electron is just a buggy ill-conceived hack to wrap a browser with nodejs to make webpages. All it provides is a blank window with no customisation and a huge size and memory overhead.","num_comments":null,"story_id":17560871,"story_title":"Qt Creator 4.7.0 released","story_url":"http://blog.qt.io/blog/2018/07/18/qt-creator-4-7-0-released/","parent_id":17562632,"created_at_i":1531955932,"_tags":["comment","author_remoroid","story_17560871"],"objectID":"17562839","_highlightResult":{"author":{"value":"remoroid","matchLevel":"none","matchedWords":[]},"comment_text":{"value":"Yep, if you can even compare Electron to Qt. Electron is just a buggy ill-conceived hack to wrap a browser with \u003cem\u003enodejs\u003c/em\u003e to make webpages. All it provides is a blank window with no customisation and a huge size and memory overhead.","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"story_title":{"value":"Qt Creator 4.7.0 released","matchLevel":"none","matchedWords":[]},"story_url":{"value":"http://blog.qt.io/blog/2018/07/18/qt-creator-4-7-0-released/","matchLevel":"none","matchedWords":[]}}},{"created_at":"2018-07-18T23:01:19.000Z","title":"Fast, Concise and Understandable Database Write to Mem or Disk in Node.js","url":null,"author":"andrewhodel","points":1,"story_text":"https:\u0026#x2F;\u0026#x2F;www.npmjs.com\u0026#x2F;package\u0026#x2F;sdbjs\u003cp\u003eVersion 66.85.71.82.69.80.79.82.84.71.79.79.68 for any of you UNICODE fans out there.\u003cp\u003eHit me up if you want to work together and build something new on top of it.","comment_text":null,"num_comments":4,"story_id":null,"story_title":null,"story_url":null,"parent_id":null,"created_at_i":1531954879,"_tags":["story","author_andrewhodel","story_17562728"],"objectID":"17562728","_highlightResult":{"title":{"value":"Fast, Concise and Understandable Database Write to Mem or Disk in \u003cem\u003eNode.js\u003c/em\u003e","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"author":{"value":"andrewhodel","matchLevel":"none","matchedWords":[]},"story_text":{"value":"https://www.npmjs.com/package/sdbjs\u003cp\u003eVersion 66.85.71.82.69.80.79.82.84.71.79.79.68 for any of you UNICODE fans out there.\u003cp\u003eHit me up if you want to work together and build something new on top of it.","matchLevel":"none","matchedWords":[]}}},{"created_at":"2018-07-18T22:21:55.000Z","title":null,"url":null,"author":"cutler","points":null,"story_text":null,"comment_text":"Why Node rather than Rails if you were already using Catalyst? Node\u0026#x27;s async everything isn\u0026#x27;t everyone\u0026#x27;s cup of tea.","num_comments":null,"story_id":17558095,"story_title":"Confessions of a recovering Perl Hacker","story_url":"https://opensource.com/article/18/7/confessions-recovering-perl-hacker","parent_id":17561064,"created_at_i":1531952515,"_tags":["comment","author_cutler","story_17558095"],"objectID":"17562539","_highlightResult":{"author":{"value":"cutler","matchLevel":"none","matchedWords":[]},"comment_text":{"value":"Why Node rather than Rails if you were already using Catalyst? \u003cem\u003eNode's\u003c/em\u003e async everything isn't everyone's cup of tea.","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"story_title":{"value":"Confessions of a recovering Perl Hacker","matchLevel":"none","matchedWords":[]},"story_url":{"value":"https://opensource.com/article/18/7/confessions-recovering-perl-hacker","matchLevel":"none","matchedWords":[]}}},{"created_at":"2018-07-18T22:00:27.000Z","title":"How to save time with magic scaffolding (Node.js/React Focus)","url":"https://medium.com/@bamblehorse/how-to-save-time-with-magic-scaffolding-34be5737234f","author":"bamblehorse","points":1,"story_text":null,"comment_text":null,"num_comments":0,"story_id":null,"story_title":null,"story_url":null,"parent_id":null,"created_at_i":1531951227,"_tags":["story","author_bamblehorse","story_17562428"],"objectID":"17562428","_highlightResult":{"title":{"value":"How to save time with magic scaffolding (\u003cem\u003eNode.js\u003c/em\u003e/React Focus)","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"url":{"value":"https://medium.com/@bamblehorse/how-to-save-time-with-magic-scaffolding-34be5737234f","matchLevel":"none","matchedWords":[]},"author":{"value":"bamblehorse","matchLevel":"none","matchedWords":[]}}},{"created_at":"2018-07-18T21:08:07.000Z","title":null,"url":null,"author":"mcintyre1994","points":null,"story_text":null,"comment_text":"Ah I see what you mean, fair point - I\u0026#x27;d agree that doesn\u0026#x27;t really work!\u003cp\u003eTBH my 2-node system was a simplified version of Corosync which I\u0026#x27;ve worked with a bit, in that you allow quorum if you have half+1 of nodes up - so 4\u0026#x2F;5 up will maintain quorum. The highest-node lives rule is just a tie breaker in the case of a half\u0026#x2F;half split which the 2 node system always has when one node goes down. Good point though, that rule alone is definitely not a good idea.","num_comments":null,"story_id":17528817,"story_title":"An Illustrated Proof of the CAP Theorem","story_url":"https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/","parent_id":17550178,"created_at_i":1531948087,"_tags":["comment","author_mcintyre1994","story_17528817"],"objectID":"17562075","_highlightResult":{"author":{"value":"mcintyre1994","matchLevel":"none","matchedWords":[]},"comment_text":{"value":"Ah I see what you mean, fair point - I'd agree that doesn't really work!\u003cp\u003eTBH my 2-node system was a simplified version of Corosync which I've worked with a bit, in that you allow quorum if you have half+1 of \u003cem\u003enodes\u003c/em\u003e up - so 4/5 up will maintain quorum. The highest-node lives rule is just a tie breaker in the case of a half/half split which the 2 node system always has when one node goes down. Good point though, that rule alone is definitely not a good idea.","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"story_title":{"value":"An Illustrated Proof of the CAP Theorem","matchLevel":"none","matchedWords":[]},"story_url":{"value":"https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/","matchLevel":"none","matchedWords":[]}}}],"nbHits":40251,"page":0,"nbPages":50,"hitsPerPage":20,"processingTimeMS":6,"exhaustiveNbHits":false,"query":"nodejs","params":"advancedSyntax=true\u0026analytics=false\u0026query=nodejs"}